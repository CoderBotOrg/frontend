/* tslint:disable */
/* eslint-disable */
/**
 * CoderBot Cloud API - Robot only - OpenAPI 3.0
 * CoderBot Cloud API - Robot only
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@coderbot.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'id'?: string;
    /**
     * Organization id
     * @type {string}
     * @memberof Activity
     */
    'org_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'data'?: string;
    /**
     * Activity status
     * @type {string}
     * @memberof Activity
     */
    'status'?: ActivityStatusEnum;
}

export const ActivityStatusEnum = {
    Active: 'active',
    Deactivated: 'deactivated'
} as const;

export type ActivityStatusEnum = typeof ActivityStatusEnum[keyof typeof ActivityStatusEnum];

/**
 * 
 * @export
 * @interface Program
 */
export interface Program {
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    'id'?: string;
    /**
     * Organization id
     * @type {string}
     * @memberof Program
     */
    'org_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    'dom_code'?: string;
    /**
     * Program status
     * @type {string}
     * @memberof Program
     */
    'status'?: ProgramStatusEnum;
}

export const ProgramStatusEnum = {
    Active: 'active',
    Deactivated: 'deactivated'
} as const;

export type ProgramStatusEnum = typeof ProgramStatusEnum[keyof typeof ProgramStatusEnum];

/**
 * 
 * @export
 * @interface Robot
 */
export interface Robot {
    /**
     * 
     * @type {string}
     * @memberof Robot
     */
    'id'?: string;
    /**
     * Organization id
     * @type {string}
     * @memberof Robot
     */
    'org_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Robot
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Robot
     */
    'description'?: string;
    /**
     * Robot Status
     * @type {string}
     * @memberof Robot
     */
    'status'?: RobotStatusEnum;
}

export const RobotStatusEnum = {
    Active: 'active',
    Deactivated: 'deactivated'
} as const;

export type RobotStatusEnum = typeof RobotStatusEnum[keyof typeof RobotStatusEnum];

/**
 * 
 * @export
 * @interface RobotData
 */
export interface RobotData {
    /**
     * 
     * @type {string}
     * @memberof RobotData
     */
    'id'?: string;
    /**
     * Organization id
     * @type {string}
     * @memberof RobotData
     */
    'org_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobotData
     */
    'name'?: string;
    /**
     * Robot Status
     * @type {string}
     * @memberof RobotData
     */
    'status'?: RobotDataStatusEnum;
}

export const RobotDataStatusEnum = {
    Active: 'active',
    Deactivated: 'deactivated'
} as const;

export type RobotDataStatusEnum = typeof RobotDataStatusEnum[keyof typeof RobotDataStatusEnum];

/**
 * 
 * @export
 * @interface Setting
 */
export interface Setting {
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'id'?: string;
    /**
     * Organization id
     * @type {string}
     * @memberof Setting
     */
    'org_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'data'?: string;
    /**
     * Settings status
     * @type {string}
     * @memberof Setting
     */
    'status'?: SettingStatusEnum;
}

export const SettingStatusEnum = {
    Active: 'active',
    Deactivated: 'deactivated'
} as const;

export type SettingStatusEnum = typeof SettingStatusEnum[keyof typeof SettingStatusEnum];


/**
 * RobotSyncApi - axios parameter creator
 * @export
 */
export const RobotSyncApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get CoderBot current activities
         * @summary Get robot activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRobotActivities: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robot/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication coderbot_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CoderBot current configuration
         * @summary Get robot data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRobotData: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robot/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication coderbot_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CoderBot current programs
         * @summary Get robot programs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRobotPrograms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robot/programs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication coderbot_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CoderBot current setting
         * @summary Get robot data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRobotSetting: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robot/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication coderbot_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set CoderBot current activities
         * @summary Set robot settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRobotActivities: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robot/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication coderbot_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CoderBot current programs
         * @summary Put robot programs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRobotPrograms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robot/programs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication coderbot_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CoderBot current setting
         * @summary Set robot settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRobotSetting: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robot/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication coderbot_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update CoderBot data
         * @summary Update CoderBot data
         * @param {RobotData} robotData RobotData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRobotData: async (robotData: RobotData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'robotData' is not null or undefined
            assertParamExists('updateRobotData', 'robotData', robotData)
            const localVarPath = `/robot/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication coderbot_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robotData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RobotSyncApi - functional programming interface
 * @export
 */
export const RobotSyncApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RobotSyncApiAxiosParamCreator(configuration)
    return {
        /**
         * Get CoderBot current activities
         * @summary Get robot activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRobotActivities(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Activity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRobotActivities(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get CoderBot current configuration
         * @summary Get robot data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRobotData(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobotData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRobotData(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get CoderBot current programs
         * @summary Get robot programs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRobotPrograms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Program>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRobotPrograms(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get CoderBot current setting
         * @summary Get robot data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRobotSetting(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Setting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRobotSetting(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set CoderBot current activities
         * @summary Set robot settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRobotActivities(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Activity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setRobotActivities(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get CoderBot current programs
         * @summary Put robot programs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRobotPrograms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Program>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setRobotPrograms(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get CoderBot current setting
         * @summary Set robot settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRobotSetting(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Setting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setRobotSetting(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update CoderBot data
         * @summary Update CoderBot data
         * @param {RobotData} robotData RobotData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRobotData(robotData: RobotData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobotData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRobotData(robotData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RobotSyncApi - factory interface
 * @export
 */
export const RobotSyncApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RobotSyncApiFp(configuration)
    return {
        /**
         * Get CoderBot current activities
         * @summary Get robot activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRobotActivities(options?: any): AxiosPromise<Array<Activity>> {
            return localVarFp.getRobotActivities(options).then((request) => request(axios, basePath));
        },
        /**
         * Get CoderBot current configuration
         * @summary Get robot data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRobotData(options?: any): AxiosPromise<RobotData> {
            return localVarFp.getRobotData(options).then((request) => request(axios, basePath));
        },
        /**
         * Get CoderBot current programs
         * @summary Get robot programs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRobotPrograms(options?: any): AxiosPromise<Array<Program>> {
            return localVarFp.getRobotPrograms(options).then((request) => request(axios, basePath));
        },
        /**
         * Get CoderBot current setting
         * @summary Get robot data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRobotSetting(options?: any): AxiosPromise<Setting> {
            return localVarFp.getRobotSetting(options).then((request) => request(axios, basePath));
        },
        /**
         * Set CoderBot current activities
         * @summary Set robot settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRobotActivities(options?: any): AxiosPromise<Array<Activity>> {
            return localVarFp.setRobotActivities(options).then((request) => request(axios, basePath));
        },
        /**
         * Get CoderBot current programs
         * @summary Put robot programs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRobotPrograms(options?: any): AxiosPromise<Array<Program>> {
            return localVarFp.setRobotPrograms(options).then((request) => request(axios, basePath));
        },
        /**
         * Get CoderBot current setting
         * @summary Set robot settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRobotSetting(options?: any): AxiosPromise<Setting> {
            return localVarFp.setRobotSetting(options).then((request) => request(axios, basePath));
        },
        /**
         * Update CoderBot data
         * @summary Update CoderBot data
         * @param {RobotData} robotData RobotData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRobotData(robotData: RobotData, options?: any): AxiosPromise<RobotData> {
            return localVarFp.updateRobotData(robotData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RobotSyncApi - object-oriented interface
 * @export
 * @class RobotSyncApi
 * @extends {BaseAPI}
 */
export class RobotSyncApi extends BaseAPI {
    /**
     * Get CoderBot current activities
     * @summary Get robot activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotSyncApi
     */
    public getRobotActivities(options?: AxiosRequestConfig) {
        return RobotSyncApiFp(this.configuration).getRobotActivities(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get CoderBot current configuration
     * @summary Get robot data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotSyncApi
     */
    public getRobotData(options?: AxiosRequestConfig) {
        return RobotSyncApiFp(this.configuration).getRobotData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get CoderBot current programs
     * @summary Get robot programs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotSyncApi
     */
    public getRobotPrograms(options?: AxiosRequestConfig) {
        return RobotSyncApiFp(this.configuration).getRobotPrograms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get CoderBot current setting
     * @summary Get robot data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotSyncApi
     */
    public getRobotSetting(options?: AxiosRequestConfig) {
        return RobotSyncApiFp(this.configuration).getRobotSetting(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set CoderBot current activities
     * @summary Set robot settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotSyncApi
     */
    public setRobotActivities(options?: AxiosRequestConfig) {
        return RobotSyncApiFp(this.configuration).setRobotActivities(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get CoderBot current programs
     * @summary Put robot programs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotSyncApi
     */
    public setRobotPrograms(options?: AxiosRequestConfig) {
        return RobotSyncApiFp(this.configuration).setRobotPrograms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get CoderBot current setting
     * @summary Set robot settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotSyncApi
     */
    public setRobotSetting(options?: AxiosRequestConfig) {
        return RobotSyncApiFp(this.configuration).setRobotSetting(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update CoderBot data
     * @summary Update CoderBot data
     * @param {RobotData} robotData RobotData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotSyncApi
     */
    public updateRobotData(robotData: RobotData, options?: AxiosRequestConfig) {
        return RobotSyncApiFp(this.configuration).updateRobotData(robotData, options).then((request) => request(this.axios, this.basePath));
    }
}


